plugins {
  id 'nebula.provided-base' version '3.0.3' // if you want provided-base
}

apply plugin: 'java'
apply plugin: 'nebula.provided-base'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  mavenCentral()
}

dependencies {
  provided "org.projectlombok:lombok:1.16.16"
  compile "com.google.guava:guava:23.0"
  compile "com.google.code.findbugs:jsr305:3.0.2"
  compile "org.apache.commons:commons-csv:1.4"
  compile "org.apache.commons:commons-lang3:3.7"
  compile "commons-io:commons-io:2.5"
  compile "log4j:log4j:1.2.17"
  compile "org.eclipse.jetty:jetty-servlet:9.4.9.v20180320"
  compile "com.unboundid:unboundid-ldapsdk:4.0.5"
  compile "org.json:json:20180130"
  compile "net.agkn:hll:1.6.0"
  compile "com.atlassian.commonmark:commonmark:0.11.0"

  testCompile "junit:junit:4.12"
}

test {
  testLogging {
    showStandardStreams = true
  }
}

task unitTest(type: Test) {
  testLogging {
    showStandardStreams = true
  }
  exclude '**/*PerformanceTest*'
  exclude '**/*Lock*Test*'
}

task dbCore(type: JavaCompile) {
  source = fileTree(
    dir: 'src/main/java',
    excludes: [
      'com/cosyan/db/lang/sql/*.java',
      'com/cosyan/db/DBApi.java',
      'com/cosyan/ui/**/*.java'])
  classpath = configurations.compile
  destinationDir = file('build/classes/dbCore')
  dependencyCacheDir = file('build/dependency-cache')
}

task execute(type:JavaExec) {
   main = 'com.cosyan.ui.WebServer'
   classpath = sourceSets.main.runtimeClasspath
}

task doc(type:JavaExec) {
   main = 'com.cosyan.db.doc.DocPrinter'
   classpath = sourceSets.main.runtimeClasspath
   args = [ project.projectDir.toString() + '/src/main' ]
}

task fatJar(type: Jar) {
	manifest {
        attributes 'Implementation-Title': 'Cosyan web',  
        	'Implementation-Version': '1.0.0',
        	'Main-Class': 'com.cosyan.ui.WebServer'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
